import type { AttemptFirstFactorParams, AttemptSecondFactorParams, AuthenticateWithPasskeyParams, AuthenticateWithPopupParams, AuthenticateWithRedirectParams, AuthenticateWithWeb3Params, CreateEmailLinkFlowReturn, OAuthStrategy, PrepareFirstFactorParams, PrepareSecondFactorParams, ResetPasswordParams, SetActiveNavigate, SignInCreateParams, SignInFirstFactor, SignInFutureResource, SignInIdentifier, SignInJSON, SignInJSONSnapshot, SignInResource, SignInSecondFactor, SignInStartEmailLinkFlowParams, SignInStatus, VerificationResource } from '@clerk/types';
import { createValidatePassword } from '../../utils/passwords/password';
import { BaseResource, UserData } from './internal';
export declare class SignIn extends BaseResource implements SignInResource {
    pathRoot: string;
    id?: string;
    status: SignInStatus | null;
    supportedIdentifiers: SignInIdentifier[];
    supportedFirstFactors: SignInFirstFactor[] | null;
    supportedSecondFactors: SignInSecondFactor[] | null;
    firstFactorVerification: VerificationResource;
    secondFactorVerification: VerificationResource;
    identifier: string | null;
    createdSessionId: string | null;
    userData: UserData;
    /**
     * @experimental This experimental API is subject to change.
     *
     * An instance of `SignInFuture`, which has a different API than `SignIn`, intended to be used in custom flows.
     */
    __internal_future: SignInFuture;
    /**
     * @internal Only used for internal purposes, and is not intended to be used directly.
     *
     * This property is used to provide access to underlying Client methods to `SignInFuture`, which wraps an instance
     * of `SignIn`.
     */
    __internal_basePost: <J extends import("@clerk/types").ClerkResourceJSON | null>(params?: import("./Base").BaseMutateParams) => Promise<this>;
    constructor(data?: SignInJSON | SignInJSONSnapshot | null);
    create: (params: SignInCreateParams) => Promise<this>;
    resetPassword: (params: ResetPasswordParams) => Promise<SignInResource>;
    prepareFirstFactor: (factor: PrepareFirstFactorParams) => Promise<SignInResource>;
    attemptFirstFactor: (attemptFactor: AttemptFirstFactorParams) => Promise<SignInResource>;
    createEmailLinkFlow: () => CreateEmailLinkFlowReturn<SignInStartEmailLinkFlowParams, SignInResource>;
    prepareSecondFactor: (params: PrepareSecondFactorParams) => Promise<SignInResource>;
    attemptSecondFactor: (params: AttemptSecondFactorParams) => Promise<SignInResource>;
    private authenticateWithRedirectOrPopup;
    authenticateWithRedirect: (params: AuthenticateWithRedirectParams) => Promise<void>;
    authenticateWithPopup: (params: AuthenticateWithPopupParams) => Promise<void>;
    authenticateWithWeb3: (params: AuthenticateWithWeb3Params) => Promise<SignInResource>;
    authenticateWithMetamask: () => Promise<SignInResource>;
    authenticateWithCoinbaseWallet: () => Promise<SignInResource>;
    authenticateWithOKXWallet: () => Promise<SignInResource>;
    authenticateWithPasskey: (params?: AuthenticateWithPasskeyParams) => Promise<SignInResource>;
    validatePassword: ReturnType<typeof createValidatePassword>;
    protected fromJSON(data: SignInJSON | SignInJSONSnapshot | null): this;
    __internal_toSnapshot(): SignInJSONSnapshot;
}
declare class SignInFuture implements SignInFutureResource {
    readonly resource: SignIn;
    emailCode: {
        sendCode: ({ email }: {
            email: string;
        }) => Promise<{
            error: unknown;
        }>;
        verifyCode: ({ code }: {
            code: string;
        }) => Promise<{
            error: unknown;
        }>;
    };
    resetPasswordEmailCode: {
        sendCode: () => Promise<{
            error: unknown;
        }>;
        verifyCode: ({ code }: {
            code: string;
        }) => Promise<{
            error: unknown;
        }>;
        submitPassword: ({ password, signOutOfOtherSessions, }: {
            password: string;
            signOutOfOtherSessions?: boolean;
        }) => Promise<{
            error: unknown;
        }>;
    };
    constructor(resource: SignIn);
    get status(): SignInStatus | null;
    get availableStrategies(): SignInFirstFactor[];
    get isTransferable(): boolean;
    get existingSession(): {
        sessionId: string;
    } | undefined;
    sendResetPasswordEmailCode(): Promise<{
        error: unknown;
    }>;
    verifyResetPasswordEmailCode({ code }: {
        code: string;
    }): Promise<{
        error: unknown;
    }>;
    submitResetPassword({ password, signOutOfOtherSessions, }: {
        password: string;
        signOutOfOtherSessions?: boolean;
    }): Promise<{
        error: unknown;
    }>;
    create(params: {
        identifier?: string;
        strategy?: OAuthStrategy | 'saml' | 'enterprise_sso';
        redirectUrl?: string;
        actionCompleteRedirectUrl?: string;
        transfer?: boolean;
    }): Promise<{
        error: unknown;
    }>;
    password({ identifier, password }: {
        identifier?: string;
        password: string;
    }): Promise<{
        error: unknown;
    }>;
    sendEmailCode({ email }: {
        email: string;
    }): Promise<{
        error: unknown;
    }>;
    verifyEmailCode({ code }: {
        code: string;
    }): Promise<{
        error: unknown;
    }>;
    sso({ flow, strategy, redirectUrl, redirectUrlComplete, }: {
        flow?: 'auto' | 'modal';
        strategy: OAuthStrategy | 'saml' | 'enterprise_sso';
        redirectUrl: string;
        redirectUrlComplete: string;
    }): Promise<{
        error: unknown;
    }>;
    finalize({ navigate }?: {
        navigate?: SetActiveNavigate;
    }): Promise<{
        error: unknown;
    }>;
}
export {};
